{"version":3,"sources":["assets/img/loading/0.svg","assets/img/loading/1.svg","assets/img/loading/2.svg","assets/img/loading/3.svg","assets/img/logo/0.svg","assets/img/logo/1.svg","assets/img/logo/2.svg","assets/img/notFound/0.svg","assets/img/error/0.svg","assets/img/error/1.svg","style/mixins.ts","style/theme.ts","components/Frame.tsx","style/GlobalStyle.tsx","config/index.ts","routes/Routes.tsx","components/Loading.tsx","components/form/TextInput.tsx","components/Icon.tsx","components/form/Button.tsx","components/LoginForm.tsx","components/Header.tsx","components/Dialog.tsx","components/Register.tsx","screens/Login.tsx","screens/NotFound.tsx","const/URIs.ts","components/screens/RoomList/ChatRoomList.tsx","components/screens/RoomList/InsertChatRoom.tsx","screens/RoomList.tsx","components/screens/ChatRoom/SendChat.tsx","components/screens/ChatRoom/ChatList.tsx","components/UserList.tsx","components/screens/ChatRoom/InviteUser.tsx","screens/ChatRoom.tsx","screens/index.ts","components/Error.tsx","App.tsx","serviceWorker.ts","store/models/Error.ts","store/models/Loading.ts","utils/request.ts","store/models/LoginInfo.ts","store/models/screens/RoomList.ts","store/models/screens/ChatRoom.ts","store/models/screens/Login.ts","store/index.ts","index.tsx"],"names":["module","exports","flexDirection","direction","flexWrap","wrap","justifyContent","justify","alignItems","align","applyFlexbox","_direction","_justifyContent","_alignItems","_wrap","theme","color1","color2","color3","color4","color5","white","black","gray6","gray9","header","dimmer","chatBubble","sendChat","h1","h2","h3","headerBorder","dialogShadow","chatBubbleShadow","Frame","styled","div","FrameCenter","FormFrame","dialogOpen","keyframes","dialogClose","DialogFrame","type","GlobalStyle","createGlobalStyle","config","host","hostRes","contextPath","Routes","props","exact","path","render","defaultProps","loading","Dimmer","LoadingFrame","Loading","className","visible","src","img0","img1","img2","img3","Math","round","random","alt","Input","input","TextInput","autoComplete","Icon","name","ButtonStyled","button","Button","icon","children","initialValues","username","validationSchema","yup","required","FormRender","values","handleChange","setFieldTouched","touched","errors","submitForm","placeholder","value","onChange","onBlur","onKeyPress","key","which","onClick","LoginForm","onSubmit","HeaderFrame","Header","Left","Right","title","style","flex","Dialog","onClose","inject","observer","screenModel","screenLogin","Error","a","register","onSubmitComplete","alert","showUp","FrameCenterSuper","loginInfo","useEffect","registerDialogVisible","login","NotFound","image","URIs","screen_chatRoom","roomId","post_login","post_logout","post_register","get_user_info","get_rooms","get_room_info","post_insert_room","get_room_invitable_users","post_invite_user","userId","get_chats","post_send_message","post_send_image","ChatRoomItemStyled","li","ChatRoomItem","room","id","userNum","createTime","withRouter","screenRoomList","history","toJS","rooms","map","push","insertRoom","ContentFrame","loadRooms","insertChatRoomVisible","InsertChatButton","logout","length","content","disabled","screenChatRoom","htmlFor","accept","e","files","target","sendImage","enableReinitialize","resetForm","sendMessage","ChatListFrame","ul","screenmodel","ref","useRef","current","scroll","top","scrollHeight","behavior","chats","chat","window","open","UserListFrame","UserListItem","UserList","users","selectable","onSelect","user","InviteUserFrame","invitableUsers","inviteUser","inviteDialogVisible","Screens","Login","RoomList","ChatRoom","match","Number","params","load","loadInvitableUser","goBack","info","ErrorFrame","error","msg","isFirstTry","autoLogin","onError","err","stack","message","FallbackComponent","componentStack","isLoading","isLogin","Boolean","location","hostname","code","this","observable","action","instance","axios","create","baseURL","timeout","withCredentials","headers","validateStatus","status","interceptors","request","use","store","response","Promise","reject","options","then","data","catch","ignoreError","LoginInfo","method","url","postLogin","updateUserInfo","newRoom","unshift","socket","disconnect","close","io","query","on","connect","console","form","FormData","append","log","password","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f6caa21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/0.44e44719.svg\";","module.exports = __webpack_public_path__ + \"static/media/1.8f63b913.svg\";","module.exports = __webpack_public_path__ + \"static/media/2.6fd94e32.svg\";","module.exports = __webpack_public_path__ + \"static/media/3.61394565.svg\";","module.exports = __webpack_public_path__ + \"static/media/0.9badf58e.svg\";","module.exports = __webpack_public_path__ + \"static/media/1.173194ce.svg\";","module.exports = __webpack_public_path__ + \"static/media/2.22bf7376.svg\";","module.exports = __webpack_public_path__ + \"static/media/0.7417a6f6.svg\";","module.exports = __webpack_public_path__ + \"static/media/0.61d40ed8.svg\";","module.exports = __webpack_public_path__ + \"static/media/1.36d59e32.svg\";","\n// Flexbox display\nconst flexbox = ():string => `\n  display: -webkit-box;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: -webkit-flex;\n  display: flex;\n`;\n\n// The 'flex' shorthand\n// - applies to: flex items\n// <positive-number>, initial, auto, or none\nconst flex = (values:string | number):string => `\n  -webkit-box-flex: ${values};\n    -moz-box-flex: ${values};\n      -webkit-flex: ${values};\n        -ms-flex: ${values};\n            flex: ${values};\n`;\n\n// Flex Flow Direction\n// - applies to: flex containers\n// row | row-reverse | column | column-reverse\nconst flexDirection = (direction:string):string => `\n  -webkit-flex-direction: ${direction};\n      -moz-flex-direction: ${direction};\n      -ms-flex-direction: ${direction};\n          flex-direction: ${direction};\n`;\n\n// Flex Line Wrapping\n// - applies to: flex containers\n// nowrap | wrap | wrap-reverse\nconst flexWrap = (wrap:string):string => `\n  -webkit-flex-wrap: ${wrap};\n      -moz-flex-wrap: ${wrap};\n      -ms-flex-wrap: ${wrap};\n          flex-wrap: ${wrap};\n`;\n\n// Flex Direction and Wrap\n// - applies to: flex containers\n// <flex-direction> || <flex-wrap>\nconst flexFlow = (flow:string):string => `\n  -webkit-flex-flow: ${flow};\n      -moz-flex-flow: ${flow};\n      -ms-flex-flow: ${flow};\n          flex-flow: ${flow};\n`;\n\n// Display Order\n// - applies to: flex items\n// <integer>\nconst order = (val:string):string => `\n  -webkit-box-ordinal-group: ${val};\n      -moz-box-ordinal-group: ${val};\n            -ms-flex-order: ${val};\n            -webkit-order: ${val};\n                order: ${val};\n`;\n\n// Flex grow factor\n// - applies to: flex items\n// <number>\nconst flexGrow = (grow:string):string => `\n  -webkit-flex-grow: ${grow};\n      -moz-flex-grow: ${grow};\n      -ms-flex-grow: ${grow};\n          flex-grow: ${grow};\n`;\n\n// Flex shrink\n// - applies to: flex item shrink factor\n// <number> \nconst flexShrink = (shrink:string):string => `\n  -webkit-flex-shrink: ${shrink};\n      -moz-flex-shrink: ${shrink};\n      -ms-flex-shrink: ${shrink};\n          flex-shrink: ${shrink};\n`;\n\n// Flex basis\n// - the initial main size of the flex item\n// - applies to: flex itemsnitial main size of the flex item\n// <width> \nconst flexBasis = (width:string):string => `\n  -webkit-flex-basis: ${width};\n      -moz-flex-basis: ${width};\n      -ms-flex-basis: ${width};\n          flex-basis: ${width};\n`;\n\n// Axis Alignment\n// - applies to: flex containers\n// flex-start | flex-end | center | space-between | space-around \nconst justifyContent = (justify:string):string => `\n  -webkit-justify-content: ${justify};\n      -moz-justify-content: ${justify};\n      -ms-justify-content: ${justify};\n          justify-content: ${justify};\n            -ms-flex-pack: ${justify};\n`;\n\n// Packing Flex Lines\n// - applies to: multi-line flex containers\n// flex-start | flex-end | center | space-between | space-around | stretch \nconst alignContent = (align:string):string => `\n  -webkit-align-content: ${align};\n      -moz-align-content: ${align};\n      -ms-align-content: ${align};\n          align-content: ${align};\n`;\n\n// Cross-axis Alignment\n// - applies to: flex containers\n// flex-start | flex-end | center | baseline | stretch \nconst alignItems = (align:string):string => `\n  -webkit-align-items: ${align};\n      -moz-align-items: ${align};\n      -ms-align-items: ${align};\n          align-items: ${align};\n`;\n\n// Cross-axis Alignment\n// - applies to: flex items\n// auto | flex-start | flex-end | center | baseline | stretch \nconst alignSelf = (align:string):string => `\n  -webkit-align-self: ${align};\n      -moz-align-self: ${align};\n      -ms-align-self: ${align};\n          align-self: ${align};\n`\n\nconst boxSizing = (type:string):string => `\n-webkit-box-sizing:${type};\n-moz-box-sizing:${type};\nbox-sizing:${type};\n`\n\nconst applyFlexbox = (_direction:string = 'row', _justifyContent:string = 'center', _alignItems:string = 'center', _wrap:string = 'nowrap'):string => `\n  ${flexbox()}\n  ${flexWrap(_wrap)}\n  ${flexDirection(_direction)}\n  ${justifyContent(_justifyContent)}\n  ${alignItems(_alignItems)}\n`\n\nexport {\n  flexbox,\n  flex,\n  flexDirection,\n  flexWrap,\n  flexFlow,\n  order,\n  flexGrow,\n  flexShrink,\n  flexBasis,\n  justifyContent,\n  alignContent,\n  alignItems,\n  alignSelf,\n  boxSizing,\n  applyFlexbox\n};","const theme: {\n  color1: string;\n  color2: string;\n  color3: string;\n  color4: string;\n  color5: string;\n  white: string;\n  black: string;\n  gray6: string;\n  gray9: string;\n  dimmer: string;\n  header: string;\n  chatBubble:string;\n  sendChat:string;\n  h1:string;\n  h2:string;\n  h3:string;\n  headerBorder: string;\n  dialogShadow: string;\n  [key:string]: string\n} = {\n  color1: 'rgba(255, 166, 158, 1)',\n  color2: 'rgba(250, 243, 221, 1)',\n  color3: 'rgba(184, 242, 230, 1)',\n  color4: 'rgba(174, 217, 224, 1)',\n  color5: 'rgba(94, 100, 114, 1)',\n  white: '#fff',\n  black: '#333',\n  gray6: '#666',\n  gray9: '#999',\n  header: 'rgb(245,247,251)',\n  dimmer: 'rgba(255,255,255,0.95)',\n  chatBubble: '#eceff1',\n  sendChat:'#f6fafd',\n  h1: `\n    font-size:1.2em;\n    font-weight:600;\n  `,\n  h2: `\n    font-size:1.15em;\n    font-weight:600;\n  `,\n  h3: `\n    font-size:1.15em;\n    font-weight:400;\n  `,\n  headerBorder: 'rgba(67,67,67,0.5)',\n  dialogShadow: '0px 4px 28px rgba(67, 67, 67, 0.25)',\n  chatBubbleShadow: '0px 6px 14px rgba(212, 219, 222, 0.72)',\n};\n\nexport default theme;","import styled, { keyframes } from 'styled-components';\nimport { applyFlexbox } from 'style/mixins';\nimport theme from 'style/theme';\n\nconst Frame = styled.div`\n  width:100%;\n  height:100%;\n  ${applyFlexbox('column','flex-start','stretch')};\n  \n  &.msg-frame {\n    .title-img {\n      width: 50%;\n      display:block;\n      margin: 0 auto;\n    }\n    .msg {\n      margin-top:2em;\n      text-align:center;\n    }\n  }\n`;\n\nconst FrameCenter = styled(Frame)`\n  ${applyFlexbox('column', 'center', 'stretch')};\n`\n\nconst FormFrame = styled.div`\n  ${applyFlexbox('column', 'flex-start', 'stretch')};\n  width:100%;\n  .row {\n    padding-left:1em;\n    padding-right:1em;\n    margin-top:0.5em;\n    margin-bottom:0.5em;\n  }\n  .row > * {\n    width: 100%;\n  }\n  .error {\n    color: #f00;\n    margin-top:.5em;\n    margin-bottom:.5em;\n  }\n`\n\nconst dialogOpen = keyframes`\n  0% {\n    opacity:0;\n    transform: scale(0.95,0.95) translateY(-12px);\n  }\n  85% {\n    transform: scale(1.05,1.05) translateY(5px);\n  }\n  100% {\n    opacity:1;\n    transform: scale(1,1) translateY(0px);\n  }\n`;\n\nconst dialogClose = keyframes`\n  0% {opacity:1}\n  100% {opacity:0}\n`;\n\nconst DialogFrame = styled.div`\n  position:absolute;\n  top:0;\n  left:0;\n  width:100%;\n  height:100%;\n  ${applyFlexbox('column','center','center')}\n  .dimmer {\n    position:absolute;\n    top:0;\n    left:0;\n    width:100%;\n    height:100%;\n    background-color:${theme.dimmer};\n  }\n  .dialog-frame {\n    width:80%;\n    z-index:999;\n    padding:1.2em;\n    margin:1em;\n    background:${theme.white};\n    position:relative;\n    box-shadow:${theme.dialogShadow};\n    .title {\n      margin-top:0.5em;\n      margin-bottom:0.5em;\n    }\n    .btn-close {\n      position:absolute;\n      display:block;\n      cursor:pointer;\n      top:0.6em;\n      right:0.6em;\n      width:auto;\n      font-size:0.6em;\n    }\n  }\n  &.visible {\n    visibility:visible;\n    .dialog-frame {\n      animation: ${dialogOpen} 0.5s ease-in-out;\n    }\n  }\n  &.hidden {\n    visibility:hidden;\n    .dialog-frame {\n      animation: ${dialogClose} 0.5s ease-in-out;\n    }\n  }\n`\n\nexport {Frame, FrameCenter, FormFrame, DialogFrame};\n\nexport default Frame;","import {createGlobalStyle} from 'styled-components';\nimport theme from './theme';\nimport {boxSizing} from './mixins';\nimport 'index.scss';\n\nconst GlobalStyle = createGlobalStyle`\n\n/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed, \n  figure, figcaption, footer, header, hgroup, \n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure, \n  footer, header, hgroup, menu, nav, section {\n    display: block;\n  }\n  body {\n    line-height: 1;\n  }\n  ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n\n  body {\n    font-size:16px;\n  }\n\n  h1 {\n    ${theme.h1}\n  }\n\n  h2 {\n    ${theme.h2}\n  }\n\n  h3 {\n    ${theme.h3}\n  }\n\n  * {\n    font-family: 'Noto Sans KR', 'Roboto', sans-serif;\n    color:${theme.black};\n    ${boxSizing('border-box')}\n  }\n\n  button, label {\n    cursor: pointer;\n  }\n\n  input {\n   -webkit-appearance: none;\n   -webkit-border-radius: 0;\n  }\n  \n  .msg-main {\n    text-align: center;\n  }\n\n  .msg-caption {\n    text-align: center;\n  }\n\n  .logo-img {\n    display: block;\n    margin: 0 auto;\n    width: 75%;\n  }\n  \n  ::-webkit-scrollbar {\n    width: 0.5em;\n    height: 0.5em;\n  }\n  ::-webkit-scrollbar-button {\n    width: 0.5em;\n    height: 0.5em;\n  }\n  ::-webkit-scrollbar-thumb {\n    background: #e1e1e1;\n    border: 0px none #ffffff;\n    border-radius: 50px;\n  }\n  ::-webkit-scrollbar-thumb:hover {\n    background: #ffffff;\n  }\n  ::-webkit-scrollbar-thumb:active {\n    background: #666;\n  }\n  ::-webkit-scrollbar-track {\n    background: #ccc;\n    border: 0px none #ffffff;\n    border-radius: 0.5em;\n  }\n  ::-webkit-scrollbar-track:hover {\n    background: #aaa;\n  }\n  ::-webkit-scrollbar-track:active {\n    background: #999;\n  }\n  ::-webkit-scrollbar-corner {\n    background: transparent;\n  }\n  .material-icons {\n    vertical-align:middle;\n  }\n  \n  html,body,#root {\n    width:100%;\n    height:100%;\n  }\n`;\n\nexport default GlobalStyle;","interface IConfig {\n  host: string;\n  hostRes: string;\n  contextPath: string;\n}\n\nconst config: IConfig = (():IConfig => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return {\n        host: 'http://localhost:8080',\n        hostRes: 'http://localhost:8080/resources',\n        contextPath: ''\n      };\n    default:\n      return {\n        host: '/',\n        hostRes: '/resources',\n        contextPath: ''\n      };\n  }\n})();\n\nexport default config;","import React, { FC } from 'react';\nimport IComponentProps from 'interfaces/IComponentProps';\nimport {Route as RouteSuper} from 'react-router-dom';\nimport config from 'config';\n\ninterface IRouteProps extends IComponentProps{\n  exact?: boolean;\n  path?: string;\n  render?: (props?:any) => JSX.Element;\n}\n\nconst Routes:FC<IRouteProps> = (props:IRouteProps) => {\n  const {exact, path, render} = props;\n  return (\n    <RouteSuper\n      {...props}\n      exact={exact}\n      path={config.contextPath+path}\n      render = {render}\n    />\n  )\n}\n\nRoutes.defaultProps = {\n  exact:false,\n  path:'',\n  render: (props?:any):JSX.Element => <></>\n}\n\nexport default Routes;","import React, { FC } from 'react';\nimport IComponentProps from 'interfaces/IComponentProps';\nimport styled, { keyframes } from 'styled-components';\nimport Frame, { FrameCenter } from './Frame';\nimport img0 from 'assets/img/loading/0.svg';\nimport img1 from 'assets/img/loading/1.svg';\nimport img2 from 'assets/img/loading/2.svg';\nimport img3 from 'assets/img/loading/3.svg';\nimport theme from 'style/theme';\n\ninterface ILoadingProps extends IComponentProps{\n  visible: boolean;\n};\n\nconst loading = keyframes`\n  0% {transform: scale(.95, .95);}\n  65% {transform: scale(1.05,1.05);}\n  100% {transform: scale(.95, .95);}\n`\n\nconst Dimmer = styled(Frame)`\n  position:fixed;\n  top:0;\n  left:0;\n  background:${theme.dimmer};\n`;\nconst LoadingFrame = styled(FrameCenter)`\n  position:fixed;\n  background:none;\n  transition: visibility opacity .1s ease;\n  visibility: hidden;\n  opacity: 0;\n  z-index:99999;\n  &.visible {\n    visibility: visible;\n    opacity:1;\n  }\n  .title-img {\n    animation: ${loading} 1.5s ease-in-out infinite;\n  }\n  .msg {\n    z-index:99999;\n  }\n`\n\nconst Loading:FC<ILoadingProps> = (props:ILoadingProps) => {\n  return (\n    <LoadingFrame className={`msg-frame ${props.visible? 'visible': ''}`}>\n      <Dimmer/>\n      <img className='title-img loading' src={[img0,img1,img2,img3][Math.round(Math.random()*3)]} alt='logo'/>\n      <div className='msg'>\n        로딩중입니다...\n      </div>\n    </LoadingFrame>\n  )\n}\nexport default Loading;","import React, { FC } from 'react';\nimport IComponentProps from 'interfaces/IComponentProps';\nimport styled from 'styled-components';\nimport theme from 'style/theme';\n\ninterface ITextInput extends IComponentProps {\n  type: string;\n  value: string;\n  name: string;\n  placehoder?: string;\n}\n\nconst Input = styled.input`\n  font-size:1em;\n  border:none;\n  border-bottom:1px solid #666;\n  padding:1em 1em;\n  background-color:transparent;\n  &::placeholder {\n    color:${theme.gray9};\n  }\n`\n\nconst TextInput:FC<ITextInput> = (props:ITextInput) => <Input {...(props as any)} autoComplete='off'/>;\n\nexport default TextInput;","import React from 'react'\nimport IComponentProps from 'interfaces/IComponentProps';\n\ninterface IIconProps extends IComponentProps {\n  name:string;\n};\n\nconst Icon = (props:IIconProps) => (\n  <span className={`material-icons ${props.className? props.className: ''}`}>{props.name}</span>\n);\nexport default Icon;","import React, { FC } from 'react'\nimport IComponentProps from 'interfaces/IComponentProps';\nimport styled from 'styled-components';\nimport theme from 'style/theme';\nimport Icon from 'components/Icon';\n\ninterface IButtonProps extends IComponentProps{\n  icon?:string;\n}\n\nconst ButtonStyled = styled.button`\n  width: 100%;\n  font-size:1em;\n  border:none;\n  padding: 1em 1em;\n  background-color:transparent;\n\n  .material-icons {\n    vertical-align:bottom;\n    &.left {\n      margin-right:.2em;\n    }\n  }\n  \n  transition: all 0.2s ease;\n  &:hover {\n    background-color:${theme.color3}\n  }\n  &:active {\n    transform:translateY(2px);\n  }\n  \n  &[type=submit] {\n    background-color:${theme.color3};\n    &:hover {\n      background-color:${theme.color2};\n    }\n  }\n`\n\nconst Button:FC<IButtonProps>= (props:IButtonProps) => {\n  return (\n    <ButtonStyled {...(props as any)}>\n      {\n        props.icon && <Icon className={`${props.children?'left': ''}`} name={props.icon}/>\n      }\n      {props.children}\n    </ButtonStyled>\n  )\n}\n\nexport default Button;","import React, {FC} from 'react'\nimport IComponentProps from 'interfaces/IComponentProps';\nimport TextInput from './form/TextInput';\nimport {Formik, FormikProps} from 'formik';\nimport * as yup from 'yup';\nimport Button from './form/Button';\nimport ILoginFormValue from 'interfaces/form/ILoginFormValue';\nimport { FormFrame } from './Frame';\nimport styled from 'styled-components';\n\ninterface ILoginForm extends IComponentProps {\n  onSubmit:(values:ILoginFormValue)=>void;\n}\n\nconst initialValues:ILoginFormValue = {\n  username: '',\n}\n\nconst validationSchema:yup.ObjectSchema = yup.object({\n  username: yup.string().required('아이디를 입력해주세요.'),\n})\n\nconst FormRender = (props:FormikProps<ILoginFormValue>) => {\n  const {values, handleChange, setFieldTouched, touched, errors, submitForm} = props;\n  return (\n    <>\n      <div className='row'>\n        <TextInput \n          type='text'\n          name='username'\n          placeholder='아이디'\n          value={values.username}\n          onChange={handleChange}\n          onBlur={()=>{setFieldTouched('username',true);}}\n          onKeyPress={(key:any)=>{\n            if (key.which === 13)\n              submitForm();\n          }}\n        />\n      </div>\n      {\n        touched.username && errors.username &&\n        <div className='error'>{errors.username}</div>\n      }\n      <div className='row row-submit'>\n        <Button \n          type='submit'\n          className='btn-submit'\n          onClick={submitForm}\n          icon='arrow_forward'\n        >\n          로그인\n        </Button>\n      </div>\n    </>\n  )\n}\n\nconst LoginForm:FC<ILoginForm> = (props:ILoginForm) => {\n  return (\n    <FormFrame>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={props.onSubmit}\n        render={(props:FormikProps<ILoginFormValue>)=> <FormRender {...props}/>}\n      />\n    </FormFrame>\n  )\n}\n\nexport default LoginForm;","import React, { FC } from 'react'\nimport IComponentProps from 'interfaces/IComponentProps';\nimport styled from 'styled-components';\nimport { applyFlexbox } from 'style/mixins';\nimport theme from 'style/theme';\n\ninterface IHeaderProps extends IComponentProps {\n  Left?: FC<IComponentProps>;\n  title?: string|FC<IComponentProps>;\n  Right?: FC<IComponentProps>;\n}\n\nconst HeaderFrame = styled.div`\n  width:100%;\n  height:4em;\n  border-bottom: 1px solid ${theme.headerBorder};\n  position:relative;\n  background-color:${theme.header};\n  .title-frame,.btn-frame {\n    position:absolute;\n    width:100%;\n    height:100%;\n    top:0;\n    left:0;\n  }\n  .title-frame {\n    ${applyFlexbox('row','center','center')};\n    .title {\n      text-align:center;\n    }\n  }\n  .btn-frame {\n    ${applyFlexbox('row','space-between','stretch')};\n    button {\n      width: auto;\n      min-width:4em;\n    }\n  }\n`;\n\nconst Header:FC<IHeaderProps> = (props:IHeaderProps) => {\n  const {Left, Right, title} = props;\n  return (\n    <HeaderFrame>\n      <div className='title-frame'>\n        {!!title  &&  <h1 className='title'>{title}</h1>}\n      </div>\n      <div className='btn-frame'>\n        {!! Left   &&  <Left {...props} />}\n        <div style={{flex:1}}></div>\n        {!! Right &&  <Right {...props} />}\n      </div>\n    </HeaderFrame>\n  )\n}\n\nexport default Header;","import React, { FC } from 'react';\nimport IComponentProps from 'interfaces/IComponentProps';\nimport { DialogFrame } from './Frame';\nimport Button from './form/Button';\nimport Icon from './Icon';\n\ninterface IDialogProps extends IComponentProps {\n  visible: boolean;\n  onClose: ()=>void;\n}\n\nconst Dialog:FC<IDialogProps> = (props:IDialogProps) => {\n  return (\n    <DialogFrame className={props.visible? 'visible':'hidden'}>\n      <div className='dialog-frame'>\n        <Button className='btn-close'\n          onClick={props.onClose}\n        >\n          <Icon name='close'/>\n        </Button>\n        {props.children}\n      </div>\n    </DialogFrame>\n  )\n}\n\nexport default Dialog;","import React from 'react';\nimport IRegisterFormValues from 'interfaces/form/IRegisterFormValues';\nimport { FormikProps, Formik } from 'formik';\nimport TextInput from './form/TextInput';\nimport * as yup from 'yup';\nimport ILoginScreenProps from 'interfaces/screens/ILoginScreenProps';\nimport { inject, observer } from 'mobx-react';\nimport Button from './form/Button';\nimport { FormFrame } from './Frame';\n\ninterface IRegisterProps extends ILoginScreenProps {\n  onSubmitComplete: (values:IRegisterFormValues) => void;\n}\n\nconst initialValues: IRegisterFormValues = {\n  username: '',\n  name:'',\n}\n\nconst validationSchema:yup.ObjectSchema = yup.object({\n  username:yup.string().required('아이디를 입력해주세요.'),\n});\n\nconst FormRender = (props:FormikProps<IRegisterFormValues>) => {\n  const {values, handleChange, setFieldTouched, touched, errors, submitForm} = props;\n  return (\n    <>\n      <div className='row'>\n        <TextInput\n          name='username'\n          type='text'\n          placeholder='아이디'\n          value={values.username}\n          onChange={handleChange}\n          onBlur={()=>{setFieldTouched('username', true)}}\n          onKeyPress={(key:any)=>{\n            if(key.which === 13)\n              submitForm();\n          }}\n        />\n      </div>\n      {\n        touched.username && errors.username &&\n          <div className='error'>\n            {errors.username}\n          </div>\n      }\n      <div className='row'>\n        <TextInput\n          name='name'\n          type='text'\n          placeholder='이름'\n          value={values.name}\n          onChange={handleChange}\n          onBlur={()=>{setFieldTouched('name', true)}}\n          onKeyPress={(key:any)=>{\n            if(key.which === 13)\n              submitForm();\n          }}\n        />\n      </div>\n      {\n        touched.name && errors.name &&\n          <div className='error'>\n            {errors.name}\n          </div>\n      }\n      <div className='row row-submit'>\n        <Button type='submit' onClick={submitForm}>전송</Button>\n      </div>\n    </>\n  )\n}\n\nconst Register = (props:IRegisterProps) => {\n  const {screenLogin:screenModel} = props;\n  if(!screenModel)\n    throw new Error('no screen model found');\n  return (\n    <FormFrame>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={async (values:IRegisterFormValues) => {\n          try {\n            await screenModel.register(values);\n            props.onSubmitComplete(values);\n          } catch(e) {\n            alert('다시 시도해주세요.');\n          }\n        }}\n        render={(props:FormikProps<IRegisterFormValues>)=><FormRender {...props}/>}\n      />\n    </FormFrame>\n  )\n}\n\nexport default inject('screenLogin', 'loginInfo')(observer(Register));","import React, {FC, useEffect} from 'react'\nimport { FrameCenter as FrameCenterSuper } from 'components/Frame';\nimport LoginForm from 'components/LoginForm';\nimport { inject, observer } from 'mobx-react';\nimport ILoginFormValue from 'interfaces/form/ILoginFormValue';\nimport LoginInfo from 'store/models/LoginInfo';\nimport img0 from 'assets/img/logo/0.svg';\nimport img1 from 'assets/img/logo/1.svg';\nimport img2 from 'assets/img/logo/2.svg';\nimport styled, { keyframes } from 'styled-components';\nimport theme from 'style/theme';\nimport Button from 'components/form/Button';\nimport Header from 'components/Header';\nimport Dialog from 'components/Dialog';\nimport Register from 'components/Register';\nimport IRegisterFormValues from 'interfaces/form/IRegisterFormValues';\nimport ILoginScreenProps from 'interfaces/screens/ILoginScreenProps';\nimport IComponentProps from 'interfaces/IComponentProps';\n\ninterface ILoginProps extends ILoginScreenProps {\n  loginInfo?: LoginInfo;\n}\n\nconst showUp = keyframes`\n  0% {opacity: 0}\n  100% {opacity: 100}\n`\n\nconst FrameCenter = styled(FrameCenterSuper)`\n  text-align:center;\n  .title {\n    margin-bottom:1em;\n  }\n  .title-img {\n    position:relative;\n    height:25%;\n    img {\n      width:100%;\n    }\n  }\n  .msg-dialog-frame {\n    background:${theme.white};\n    margin-left:2em;\n    margin-right:2em;\n    overflow:hidden;\n    opacity: 0;\n    animation: ${showUp} 2s forwards;\n    .row{\n      padding:0;\n    }\n    .row,.row-submit {\n      margin:0;\n    }\n  }\n`;\n\nconst Login:FC<ILoginProps> = (props:ILoginProps) => {\n  const {loginInfo, screenLogin:screenModel} = props;\n  useEffect(() => {\n    if(!!screenModel)\n      screenModel.registerDialogVisible = false;\n  }, [screenModel]);\n\n  if(!loginInfo && !screenModel)\n    throw new Error('로그인 모델이 없습니다.');\n  return (\n    <>\n      <Header\n        Left={\n          (props:IComponentProps)=>{\n            return(\n              <Button\n              onClick={()=>{\n                screenModel.registerDialogVisible = !screenModel.registerDialogVisible;\n              }}>회원가입</Button>\n            )\n          }\n        }\n        title={'chat chat chat'}\n      />\n      <FrameCenter className='msg-frame'>\n        <img className='title-img' src={[img0,img1,img2][Math.round(Math.random()*2)]} alt='logo'/>\n        <div className='msg'>\n          <h3 className='title'>로그인이 필요한 서비스입니다.</h3>\n          <div className='msg-dialog-frame'>\n            <LoginForm\n              onSubmit={(values:ILoginFormValue)=>{\n                loginInfo.login(values.username);\n              }}\n            />\n          </div>\n        </div>\n      </FrameCenter>\n      {\n        <Dialog \n          visible = {screenModel.registerDialogVisible}\n          onClose={()=>{screenModel.registerDialogVisible = false;}}\n        >\n          <Register\n            onSubmitComplete={(values:IRegisterFormValues)=>{\n              loginInfo.login(values.username);\n            }}\n          />\n        </Dialog>\n      }\n    </>\n  );\n}\nexport default inject('screenLogin', 'loginInfo')(observer(Login));","import React, { FC } from 'react';\nimport IComponentProps from 'interfaces/IComponentProps';\nimport { FrameCenter } from 'components/Frame';\nimport image from 'assets/img/notFound/0.svg';\n\nconst NotFound:FC<IComponentProps> = (props:IComponentProps) => {\n  return (\n    <FrameCenter className='msg-frame'>\n      <img className='title-img' src={image} alt='logo'/>\n      <div className='msg'>\n        잘못된 페이지입니다.\n      </div>\n    </FrameCenter>\n  )\n}\nexport default NotFound;","interface IURIs{\n  screen_chatRoom: (roomId:number)=>string;\n\n  post_login: string;\n  post_logout: string;\n\n  post_register: string;\n  get_user_info: string;\n  get_rooms: string;\n  get_room_info: (roomId:number)=>string;\n  post_insert_room: string;\n  get_room_invitable_users: (roomId:number)=>string;\n  post_invite_user: (roomId:number, userId:number)=>string;\n  \n  get_chats: (roomId:number)=>string;\n  post_send_message: (roomId:number)=>string;\n  post_send_image: (roomId:number)=>string;\n};\n\nconst URIs:IURIs = {\n  screen_chatRoom: (roomId:number)=> `/chat/${roomId}`,\n  \n  post_login: '/login',\n  post_logout: '/logout',\n  \n  post_register: '/api/v1/user',\n  get_user_info: '/api/v1/user',\n  get_rooms: '/api/v1/chat/rooms',\n  get_room_info: (roomId:number)=>`/api/v1/chat/room/${roomId}/info`,\n  post_insert_room: '/api/v1/chat',\n  get_room_invitable_users: (roomId:number)=>`/api/v1/chat/room/${roomId}/invitableUsers`,\n  post_invite_user: (roomId:number, userId:number)=>`api/v1/chat/room/${roomId}/invite/${userId}`,\n\n  get_chats: (roomId:number) => `/api/v1/chat/room/${roomId}`,\n  post_send_message: (roomId:number) => `/api/v1/chat/room/${roomId}/text`,\n  post_send_image: (roomId:number) => `/api/v1/chat/room/${roomId}/image`\n};\n\nexport default URIs;","import React, { FC } from 'react'\nimport IRoomListScreenProps from 'interfaces/screens/IRoomListScreenProps';\nimport { inject, observer } from 'mobx-react';\nimport IRoom from 'interfaces/IRoom';\nimport IComponentProps from 'interfaces/IComponentProps';\nimport URIs from 'const/URIs';\nimport { withRouter, RouteComponentProps } from 'react-router';\nimport styled from 'styled-components';\nimport theme from 'style/theme';\nimport Icon from 'components/Icon';\nimport { toJS } from 'mobx';\n\ninterface IChatRoomListProps extends IRoomListScreenProps,RouteComponentProps{};\ninterface IChatRoomItemProps extends IComponentProps {\n  room:IRoom;\n  onClick:(id:number)=>void;\n}\n\nconst ChatRoomItemStyled = styled.li`\n  cursor:pointer;\n  padding:2em;\n  &:hover {\n    background-color:rgba(153,153,153,0.25);\n  }\n  .title-frame {\n    font-size:1.13em;\n    .title {\n      font-weight:450;\n      margin-right:0.5em;\n    }\n    .user-num {\n      color: ${theme.gray6};\n    }\n  }\n  .create-time {\n    color: ${theme.gray9};\n    font-size: 0.8em;\n    text-align:right;\n    margin-top:0.5em;\n  }\n`;\n\nconst ChatRoomItem:FC<IChatRoomItemProps> = (props: IChatRoomItemProps) => {\n  const {room, onClick} = props;\n  return (\n    <ChatRoomItemStyled onClick={()=>{onClick(room.id)}}>\n      <div className='title-frame'>\n        <span className='title'>{room.title}</span>\n        <Icon className='user-num' name='group'/> <span className='user-num'>{room.userNum}</span>\n      </div>\n      <div className='create-time'>\n        {room.createTime}\n      </div>\n    </ChatRoomItemStyled>\n  )\n}\n\nconst ChatRoomList:FC<IChatRoomListProps> = (props:IChatRoomListProps) => {\n  const {screenRoomList:screenModel, history} = props;\n  if(!screenModel) {\n    throw new Error('no screen model found');\n  }\n  return (\n    <ul>\n      {\n        toJS(screenModel.rooms).map((room:IRoom)=>{\n          return (\n            <ChatRoomItem key={`room-${room.id}`} \n              room={room}\n              onClick={(id:number)=>{\n                history.push(URIs.screen_chatRoom(id));\n              }}\n            />\n          )\n        })\n      }\n    </ul>\n  );\n}\n\nexport default withRouter(inject('screenRoomList')(observer(ChatRoomList)));","import React, { FC } from 'react';\nimport IRoomListScreenProps from 'interfaces/screens/IRoomListScreenProps';\nimport { inject, observer } from 'mobx-react';\nimport { FormFrame } from 'components/Frame';\nimport { Formik, FormikProps } from 'formik';\nimport * as yup from 'yup';\nimport TextInput from 'components/form/TextInput';\nimport IInsertChatRoomFormValues from 'interfaces/form/IInsertChatRoomFormValues';\nimport Button from 'components/form/Button';\n\ninterface IInsertChatRoomProps extends IRoomListScreenProps {\n  onSubmitComplete:()=>void;\n};\n\nconst initialValues:IInsertChatRoomFormValues= {\n  title: ''\n}\n\nconst validationSchema:yup.ObjectSchema = yup.object({\n  title: yup.string().required('제목을 입력해주세요.'),\n});\n\nconst FormRender = (props:FormikProps<IInsertChatRoomFormValues>) => {\n  const {values, handleChange, setFieldTouched, touched, errors, submitForm} = props;\n  return (\n    <>\n      <div className='row'>\n        <TextInput\n          name='title'\n          type='text'\n          placeholder='방제목'\n          value={values.title}\n          onChange={handleChange}\n          onBlur={()=>{setFieldTouched('title', true)}}\n          onKeyPress={(key:any)=>{\n            if(key.which === 13)\n              submitForm();\n          }}\n        />\n      </div>\n      {\n        touched.title && errors.title &&\n          <div className='error'>\n            {errors.title}\n          </div>\n      }\n      <div className='row row-submit'>\n        <Button type='submit' onClick={submitForm}>전송</Button>\n      </div>\n    </>\n  )\n}\n\nconst InsertChatRoom:FC<IInsertChatRoomProps> = (props:IInsertChatRoomProps) => {\n  const {screenRoomList: screenModel} = props;\n  if(!screenModel)\n    throw new Error('no screen model found');\n  return (\n    <>\n      <h3 className='title'>대화방 생성</h3>\n      <FormFrame>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={async (values:IInsertChatRoomFormValues)=>{\n            if(!screenModel)\n              throw new Error('no screen model found');\n            await screenModel.insertRoom(values);\n            props.onSubmitComplete();\n          }}\n          render={(props)=><FormRender {...props}/>}\n        />\n      </FormFrame>\n    </>\n  )\n}\n\nexport default inject('screenRoomList')(observer(InsertChatRoom));","import React, {FC, useEffect} from 'react';\nimport IComponentProps from 'interfaces/IComponentProps';\nimport IRoomListScreenProps from 'interfaces/screens/IRoomListScreenProps';\nimport { inject, observer } from 'mobx-react';\nimport ChatRoomList from 'components/screens/RoomList/ChatRoomList';\nimport InsertChatRoom from 'components/screens/RoomList/InsertChatRoom';\nimport { withRouter, RouteComponentProps } from 'react-router';\nimport Header from 'components/Header';\nimport Button from 'components/form/Button';\nimport Dialog from 'components/Dialog';\nimport LoginInfo from 'store/models/LoginInfo';\nimport styled from 'styled-components';\nimport { applyFlexbox } from 'style/mixins';\nimport { toJS } from 'mobx';\n\ninterface IRoomList extends IRoomListScreenProps,RouteComponentProps{\n  loginInfo?:LoginInfo;\n};\n\nconst ContentFrame = styled.div`\n  flex:1;\n  ${applyFlexbox('column','flex-start','stretch')};\n  overflow:auto;\n  .chat-room-list-empty {\n    flex:1;\n    ${applyFlexbox('column', 'center', 'center')}\n    .btn-insert-chat-room {\n      width:unset;\n    }\n    p {\n      line-height:1.5em;\n      margin-bottom:1em;\n    }\n  }\n`\n\n\nconst RoomList:FC<IRoomList> = (props:IRoomList) => {\n  const {screenRoomList:screenModel, history, loginInfo} = props;\n  useEffect(() => {\n    if(!!screenModel){\n      screenModel.loadRooms();\n      screenModel.insertChatRoomVisible = false;\n    }\n  }, []);\n  if(!screenModel || !loginInfo) {\n    throw new Error('no screen model found');\n  }\n\n  const InsertChatButton =  () => (<Button\n  className='btn-insert-chat-room'\n  onClick={()=>{\n    screenModel.insertChatRoomVisible = !screenModel.insertChatRoomVisible;\n  }}\n  icon='chat'\n  title='대화추가'\n  />);\n\n  return (\n    <>\n      <Header\n        Left={\n          (props:IComponentProps)=>{\n            return(\n              <Button \n              icon='arrow_back'\n              onClick={()=>{\n                loginInfo.logout();\n              }}>로그아웃</Button>\n            )\n          }\n        }\n        title='대화방'\n        Right={(props:IComponentProps) => (<InsertChatButton/>)}\n      />\n      <ContentFrame>\n        {toJS(screenModel.rooms).length > 0?\n          <ChatRoomList/>:\n          <div className='chat-room-list-empty'>\n            <p>\n              현재 대화방이 없습니다.\n            </p>\n            <p>\n              <InsertChatButton/>을 눌러 대화를 시작해보세요.\n            </p>\n          </div>\n        }\n      </ContentFrame>\n      <Dialog \n        visible={screenModel.insertChatRoomVisible}\n        onClose={()=>{screenModel.insertChatRoomVisible = false;}}\n      >\n        <InsertChatRoom onSubmitComplete={()=>{\n          history.push(`/chat/${screenModel.rooms[0].id}`);\n        }}/>\n      </Dialog>\n    </>\n  )\n};\n\nexport default withRouter(inject('screenRoomList', 'loginInfo')(observer(RoomList)));","import React, { FC } from 'react';\nimport IChatRoomScreenProps from 'interfaces/screens/IChatRoomScreenProps';\nimport styled from 'styled-components';\nimport { applyFlexbox } from 'style/mixins';\nimport { inject } from 'mobx-react';\nimport { observer } from 'mobx-react-lite';\nimport { Formik, FormikProps, FormikActions } from 'formik';\nimport TextInput from 'components/form/TextInput';\nimport Button from 'components/form/Button';\nimport * as yup from 'yup';\nimport ISendChatFormValues from 'interfaces/form/ISendChatFormValues';\nimport Icon from 'components/Icon';\nimport theme from 'style/theme';\n\ninterface ISendChatProps extends IChatRoomScreenProps{};\n\nconst initialValues:ISendChatFormValues = {\n  content: '',\n};\n\nconst validationSchema:yup.ObjectSchema = yup.object({\n  content: yup.string().required(),\n});\n\nconst FormFrame = styled.div`\n  width:100%;\n  height:4em;\n  background-color: ${theme.sendChat};\n  ${applyFlexbox('row', 'flex-start', 'stretch')};\n  .row {\n    ${applyFlexbox('row', 'flex-start', 'stretch')};\n    min-width:5em;\n  }\n  .row:not(.submit):not(.send-image-btn-frame) {\n    flex:1;\n    > * {\n      width: 100%;\n    }\n  }\n  input[type='text'] {\n    border-bottom:none;\n  }\n  .send-image-btn-frame {\n    min-width:4em;\n    border-right:1px solid ${theme.gray9};\n  }\n  .btn-send-image {\n    width:100%;\n    height:100%;\n    ${applyFlexbox('row','center','center')};\n    &+input[type='file'] {\n      display:none;\n    }\n    &:hover {\n      background-color:${theme.color3};\n    }\n    &:active {\n      transform:translateY(2px);\n    }\n  }\n`\n\nconst FormRender = (props:FormikProps<ISendChatFormValues>) => {\nconst {values, handleChange, submitForm} = props;\n\n  return (\n    <>\n      <div className='row'>\n        <TextInput type='text' name='content' value={values.content} placeholder='메시지를 입력하세요.' onChange={handleChange}\n          onKeyPress={(key:any)=>{\n            if(key.which === 13)\n              submitForm();\n          }}\n        />\n      </div>\n      <div className='row submit'>\n        <Button disabled={!values.content} type='submit' onClick={submitForm}>\n          <Icon name='send' />\n        </Button>\n      </div>\n    </>\n  )\n}\n\nconst SendChat:FC<ISendChatProps> = (props:ISendChatProps) => {\n  const {screenChatRoom:screenModel} = props;\n  if(!screenModel)\n    throw new Error('screen model not found');\n  return (\n    <FormFrame>\n      <div className='row send-image-btn-frame'>\n        <label className='btn-send-image' htmlFor='send-image'>\n          <Icon name='image'/>\n        </label>\n        <input type='file' id='send-image' name='image' accept=\"image/*\"\n          onChange={(e:any)=>{\n            const {files} = e.target;\n            if(!!files[0])\n              screenModel.sendImage(files[0]);\n          }}\n        />\n      </div>\n      <Formik\n        enableReinitialize={true}\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={(values, {resetForm}:FormikActions<ISendChatFormValues>)=>{\n          screenModel.sendMessage(values);\n          resetForm();\n          \n        }}\n        render={(props)=><FormRender {...props} />}\n      />\n    </FormFrame>\n  )\n}\n\nexport default inject('screenChatRoom')(observer(SendChat));","import React, { FC, useRef, useEffect } from 'react'\nimport IChatRoomScreenProps from 'interfaces/screens/IChatRoomScreenProps';\nimport LoginInfo from 'store/models/LoginInfo';\nimport styled from 'styled-components';\nimport { inject, observer } from 'mobx-react';\nimport IChat from 'interfaces/IChat';\nimport theme from 'style/theme';\nimport { applyFlexbox } from 'style/mixins';\nimport Button from 'components/form/Button';\nimport config from 'config';\n\ninterface IChatListProps extends IChatRoomScreenProps {\n  loginInfo?:LoginInfo;\n}\n\nconst ChatListFrame = styled.ul`\n  flex:1;\n  overflow-y:auto;\n  .list-item-frame {\n    margin: 1em;\n    .chat-name {\n      font-size:0.9em;\n      color:${theme.gray6};\n      margin-left:1.2em;\n      margin-bottom:0.2em;\n    }\n    .chat-frame {\n      position:relative;\n      ${applyFlexbox('row','flex-start','flex-end')};\n      margin:0 1em;\n      .chat-name.self {\n        display:none;\n      }\n      .chat-content {\n        background-color:${theme.chatBubble};\n        padding:0.8em;\n        border-radius:0.8em;\n        box-shadow: ${theme.chatBubbleShadow};\n        .chat-content-image {\n          width:100%;\n          cursor:pointer;\n        }\n      }\n      .chat-create-time {\n        margin:0 0.6em;\n        font-size:0.5em;\n        font-color:${theme.gray9};\n      }\n      &:after {\n        content: '';\n        position:absolute;\n        border-style: solid;\n        border-width: 0 0 .6em .6em;\n        border-color: transparent transparent ${theme.chatBubble} transparent;\n        left:-.6em;\n        bottom:0.8em;\n        box-shadow: ${theme.chatBubbleShadow};\n      }\n    }\n    &.myself{\n      .chat-frame {\n        ${applyFlexbox('row-reverse','flex-start','flex-end')};\n        .chat-content {\n          background-color:${theme.color3};\n        }\n        &:after {\n          content: '';\n          position:absolute;\n          border-style: solid;\n          border-width: .6em 0 0 .6em;\n          border-color: transparent transparent transparent ${theme.color3};\n          left:unset;\n          right:-.6em;\n          bottom:0.8em;\n        }\n      }\n      .chat-name {\n        display:none;\n      }\n    }\n  }\n`;\n\nconst ChatList:FC<IChatListProps> = (props:IChatListProps) => {\n  const{screenChatRoom:screenmodel, loginInfo}= props;\n  const ref = useRef(null);\n  if(!screenmodel || !loginInfo)\n    throw new Error('no screen model found');\n  useEffect(() => {\n  if(!!ref.current)\n    ref.current.scroll({top:ref.current.scrollHeight, behavior:'smooth'});\n  })\n\n  return(\n    <ChatListFrame\n      ref={ref}\n    >\n      {\n        screenmodel.chats.map((chat:IChat)=>(\n          <li\n            key={`chat-${chat.id}`}\n            className={`list-item-frame ${chat.userId === loginInfo.id && 'myself'}`}\n          >\n            <div className='chat-name'>\n              {chat.name}\n            </div>\n            <div className='chat-frame '>\n              <div className='chat-content'>\n                {\n                  chat.type === 'image' ?\n                  <img\n                    alt='image message'\n                    className='chat-content-image'\n                    src={`${config.hostRes}/uploads/${chat.content}`}\n                    title='image'\n                    onClick={()=>{\n                      window.open(`${config.hostRes}/uploads/${chat.content}`, '_blank');\n                    }}\n                  />\n                  :\n                  chat.content\n                }\n              </div>\n              <div className='chat-create-time'>\n                {chat.createTime}\n              </div>\n            </div>\n          </li>\n        ))\n      }\n    </ChatListFrame>\n  )\n}\n\nexport default inject('screenChatRoom', 'loginInfo')(observer(ChatList));","import React, { FC } from 'react';\nimport IUser from 'interfaces/IUser';\nimport IComponentProps from 'interfaces/IComponentProps';\nimport styled from 'styled-components';\nimport Button from './form/Button';\nimport theme from 'style/theme';\nimport { applyFlexbox } from 'style/mixins';\n\ninterface IUserListProps extends IComponentProps {\n  users: IUser[];\n  selectable: boolean;\n  onSelect:(userId:number) => void;\n}\n\nconst UserListFrame = styled.ul`\n`;\n\nconst UserListItem = styled.li`\n  height:2em;\n  width:100%;\n\n  .list-item-user {\n    width:100%;\n    height:100%;\n    display:block;\n    padding:0 1em;\n    ${applyFlexbox('row', 'flex-start', 'center')};\n    button {\n      display:none;\n    }\n  }\n  .list-item-user:hover {\n    background-color:${theme.color2};\n  }\n`;\n\nconst UserList:FC<IUserListProps> = (props:IUserListProps) => {\n  const {users, selectable, onSelect} = props;\n  return (\n    <UserListFrame>\n      {\n        users.map((user:IUser) => (\n          <UserListItem key={`user-${user.id}`}>\n            <label className='list-item-user'>\n              <span className='name'>{user.name}</span>\n              {\n                selectable &&\n                <Button\n                  onClick={()=>{onSelect(user.id);}}\n                >\n                </Button>\n              }\n            </label>\n          </UserListItem>\n        ))\n      }\n    </UserListFrame>\n  )\n}\n\nexport default UserList;","import React, { FC, useEffect } from 'react'\nimport IChatRoomScreenProps from 'interfaces/screens/IChatRoomScreenProps';\nimport styled from 'styled-components';\nimport { inject } from 'mobx-react';\nimport { observer } from 'mobx-react-lite';\nimport UserList from 'components/UserList';\nimport { toJS } from 'mobx';\n\ninterface IInviteUserProps extends IChatRoomScreenProps {};\n\nconst InviteUserFrame = styled.div`\n  .infomation {\n    margin-bottom: 1em;\n  }\n`;\n\nconst InviteUser:FC<IInviteUserProps> = (props:IInviteUserProps) => {\n  const {screenChatRoom:screenModel} = props;\n  if(!screenModel)\n    throw new Error('screen model not found');\n  const invitableUsers = toJS(screenModel.invitableUsers);\n  return(\n    <InviteUserFrame>\n      <h3 className='title'>사용자 초대</h3>\n      <div className='infomation'>\n        초대할 사용자를 선택하세요.\n      </div>\n      {\n        invitableUsers.length === 0 ?\n        '초대할 사용자가 없습니다.'\n        : <UserList \n          users={invitableUsers}\n          selectable={true}\n          onSelect={async (userId:number) => {\n            await screenModel.inviteUser(userId);\n            screenModel.inviteDialogVisible = false;\n          }}\n        />\n      }\n    </InviteUserFrame>\n  );\n}\n\nexport default inject('screenChatRoom')(observer(InviteUser));","import React, {FC, useEffect} from 'react'\nimport IChatRoomScreenProps from 'interfaces/screens/IChatRoomScreenProps';\nimport { inject, observer } from 'mobx-react';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport SendChat from 'components/screens/ChatRoom/SendChat';\nimport ChatList from 'components/screens/ChatRoom/ChatList';\nimport Header from 'components/Header';\nimport IComponentProps from 'interfaces/IComponentProps';\nimport Button from 'components/form/Button';\nimport styled from 'styled-components';\nimport { applyFlexbox } from 'style/mixins';\nimport InviteUser from 'components/screens/ChatRoom/InviteUser';\nimport Dialog from 'components/Dialog';\n\ninterface IChatRoomPathVariables {\n  id?:string;\n}\n\nconst ContentFrame = styled.div`\n  flex:1;\n  ${applyFlexbox('column','flex-start','stretch')};\n  overflow:hidden;\n`\n\ninterface IChatRoomProps extends IChatRoomScreenProps, RouteComponentProps<IChatRoomPathVariables> {}\n\nconst ChatRoom:FC<IChatRoomProps> = (props:IChatRoomProps) => {\n  const {screenChatRoom:screenModel, match, history} = props;\n  useEffect(() => {\n    if(!screenModel)\n      return;\n    screenModel.roomId = Number(match.params.id);\n    screenModel.load();\n    screenModel.loadInvitableUser();\n    screenModel.inviteDialogVisible = false;\n  }, []);\n\n  // let {inviteDialogVisible} = screenModel;\n\n  if(!screenModel)\n    throw new Error('no screen model found');\n  \n  return (\n    <>\n      <Header\n        Left={\n          (props:IComponentProps)=>{\n            return(\n              <Button \n              icon='arrow_back'\n              onClick={()=>{\n                history.goBack();\n              }}>뒤로</Button>\n            )\n          }\n        }\n        Right= {\n          (props:IComponentProps) => {\n            return (\n              <Button\n                icon='person_add'\n                onClick={()=>{\n                  screenModel.inviteDialogVisible = !screenModel.inviteDialogVisible;\n                }}\n              />\n            )\n          }\n        }\n        title={screenModel.info? screenModel.info.title : ''}\n      />\n      <ContentFrame>\n        <ChatList/>\n        <SendChat/>\n        <Dialog visible={screenModel.inviteDialogVisible} onClose={()=>{screenModel.inviteDialogVisible = false}}>\n          <InviteUser/>\n        </Dialog>\n      </ContentFrame>\n    </>\n  );\n}\n\nexport default withRouter(inject('screenChatRoom')(observer(ChatRoom)));","import Login from './Login';\nimport NotFound from './NotFound';\nimport RoomList from './RoomList';\nimport ChatRoom from './ChatRoom';\n\nconst Screens = {\n  Login,\n  NotFound,\n  RoomList,\n  ChatRoom\n};\n\nexport default Screens;","import React, { FC } from 'react';\nimport IComponentProps from 'interfaces/IComponentProps';\nimport ErrorModel from 'store/models/Error';\nimport styled from 'styled-components';\nimport Frame, { FrameCenter } from './Frame';\nimport img0 from 'assets/img/error/0.svg';\nimport img1 from 'assets/img/error/1.svg';\nimport Button from './form/Button';\nimport theme from 'style/theme';\nimport { inject, observer } from 'mobx-react';\nimport { applyFlexbox } from 'style/mixins';\n\ninterface IErrorProps extends IComponentProps{\n  error?:ErrorModel;\n};\n\nconst ErrorFrame = styled(FrameCenter)`\n  position:fixed;\n  background:none;\n  transition: visibility opacity .1s ease;\n  visibility: hidden;\n  ${applyFlexbox('column','center','center')};\n  z-index:99999;\n  opacity: 0;\n  &.visible {\n    visibility: visible;\n    opacity:1;\n  }\n  .msg,.title-img {\n    z-index: 99999;\n  }\n  .msg {\n    p {\n      margin-bottom:2em;\n    }\n  }\n`;\nconst Dimmer = styled(Frame)`\n  position:fixed;\n  top:0;\n  left:0;\n  background:${theme.dimmer};\n`;\n\nconst ErrorComponent:FC<IErrorProps> = (props:IErrorProps) => {\n  const {error} = props;\n  if(!error)\n    throw new Error('error model not found');\n  return (\n    <ErrorFrame className={`msg-frame ${error.visible? 'visible': ''}`}>\n      <Dimmer/>\n      <img className='title-img' src={[img0,img1][Math.round(Math.random()*1)]} alt='logo'/>\n      <div className='msg'>\n        <p>\n          {error.msg}\n        </p>\n        <Button\n          className='btn-close'\n          onClick={()=>{error.visible = false;}}\n        >\n          알겠습니다.\n        </Button>\n      </div>\n    </ErrorFrame>\n  )\n}\n\nexport default inject('error')(observer(ErrorComponent));","import React, { FC, useEffect, Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport Frame from 'components/Frame';\nimport GlobalStyle from 'style/GlobalStyle';\nimport { BrowserRouter, Switch } from 'react-router-dom';\nimport Routes from 'routes/Routes';\nimport IComponentProps from 'interfaces/IComponentProps';\nimport LoginInfo from 'store/models/LoginInfo';\nimport Loading from 'components/Loading';\n\nimport Screens from 'screens';\nimport LoadingModel from 'store/models/Loading';\nimport Error from 'store/models/Error';\nimport ErrorComponent from 'components/Error';\nimport ErrorBoundary from 'react-error-boundary';\n\ninterface IAppProps extends IComponentProps {\n  loginInfo?: LoginInfo;\n  loading?: LoadingModel;\n  error?: Error;\n}\n\nconst App:FC<IAppProps> = (props:IAppProps) => {\n  const {loginInfo, loading, error} = props;\n  useEffect(() => {\n    if(!!loginInfo && loginInfo.isFirstTry) {\n      loginInfo.autoLogin();\n    }\n  }, [loginInfo]);\n    return (\n      <>\n        <ErrorBoundary onError={(err, stack) => {\n          error.msg = err.message;\n          error.visible = true;\n        }} FallbackComponent={ ({ componentStack, error }) =><ErrorComponent/>}>\n          <Frame>\n            <GlobalStyle/>\n            <Loading visible={!loginInfo || !loading || !error || loading.isLoading} />\n            <ErrorComponent />\n            {\n              !!loginInfo && !loginInfo.isLogin?\n                <Screens.Login />\n              :\n                <BrowserRouter>\n                  <Switch>\n                  <Routes exact path='/' render = {(props)=><Screens.RoomList {...props}/>}/>\n                  <Routes exact path='/chat/:id' render = {(props)=><Screens.ChatRoom {...props}/>}/>\n                  <Routes render={(props)=><Screens.NotFound {...props}/>}/>\n                  </Switch>\n                </BrowserRouter>\n            }\n          </Frame>\n        </ErrorBoundary>\n      </>\n    );\n}\n\nexport default inject('loginInfo', 'loading', 'error')(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, action } from \"mobx\";\n\ninterface IError {\n  visible?: boolean;\n  code?: string;\n  msg?: string;\n}\n\nexport default class Error {\n  @observable visible?: boolean;\n  @observable code?: string;\n  @observable msg?: string;\n\n  constructor(\n    {visible = false, code='UNDEFINED', msg='알 수 없는 에러'}:IError\n  ) {\n    this.visible = visible;\n    this.code = code;\n    this.msg = msg;\n  }\n\n  @action\n  toggle = () => {\n    this.visible = !this.visible;\n  }\n\n  @action\n  setError({visible = true, code, msg}:IError) {\n    this.visible = visible;\n    this.code = code;\n    this.msg = msg;\n  }\n}","import {observable, action} from 'mobx';\n\nexport default class Loading {\n  @observable isLoading: boolean;\n  \n  constructor() {\n    this.isLoading = false;\n  }\n\n  @action\n  toggleLoading = () => {\n    this.isLoading = !this.isLoading;\n  }\n}","import axios, { AxiosResponse } from 'axios';\nimport config from 'config';\nimport store from 'store';\n\nconst instance = axios.create({\n  baseURL:config.host,\n  timeout:-1,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  validateStatus: function (status) {\n  return status >= 200 && status < 300; // default\n  },\n});\n\ninstance.interceptors.request.use((config:any) => {\n  store.loading.isLoading = true;\n  return config;\n});\n\ninstance.interceptors.response.use((response:AxiosResponse<any>) => {\n  store.loading.isLoading = false;\n  return response;\n}, (err:any) => {\n  return Promise.reject(err);\n});\n\ninterface IRequestOptions {\n  method: 'get' | 'GET' | 'post' | 'POST' | 'put' | 'PUT' | string;\n  url: string;\n  data?: any;\n  param?: any;\n  ignoreError?: boolean;\n  headers?: any\n  [key:string]:any;\n}\n\nconst request = (options: IRequestOptions | any) => {\n  const onSuccess = (response:AxiosResponse<any>):any => {\n    return response.data;\n  }\n\n  const onError = (err:any) => {\n    // handleError(err);\n    store.loading.isLoading = false;\n    if(!options.ignoreError) {\n      store.error.visible = true;\n      if(!err.response || !err.response.data || !err.response.data.message)\n        store.error.msg = '알 수 없는 에러입니다.';\n      else\n        store.error.msg = err.response.data.message;\n      if(!!err.response && err.response.status === 400){\n        store.loginInfo.logout();\n      }\n    }\n    throw err;\n  }\n\n  return instance(options)\n  .then(onSuccess)\n  .catch(onError);\n}\n\nexport default request;","import { observable, action } from \"mobx\";\nimport request from \"utils/request\";\nimport URIs from \"const/URIs\";\n\nexport default class LoginInfo {\n  @observable id:number = -1;\n  @observable username:string = '';\n  @observable name:string = '';\n  @observable isLogin: boolean = false;\n  isFirstTry:boolean = true;\n\n  @action\n  login = async (username:string) => {\n    try {\n      this.isFirstTry = false;\n      await request({\n        method:'post',\n        url: URIs.post_login,\n        data: {\n          username\n        }\n      });\n      this.isLogin = true;\n      await this.postLogin();\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  @action\n  autoLogin = async () => {\n    try {\n      await this.postLogin();\n      this.isLogin = true;\n    } catch (e) {\n      if(!this.isFirstTry)\n        return true;\n      else\n        throw e;\n    } finally {\n      this.isFirstTry = false;\n    }\n  }\n\n  @action\n  updateUserInfo = async () => {\n    try {\n      const {userId, username, name} = await request({\n        method: 'get',\n        url: URIs.get_user_info,\n        ignoreError: this.isFirstTry,\n      });\n      this.id = userId;\n      this.username = username;\n      this.name = name;\n    } catch (e) {\n      throw e;\n    }\n  }\n  \n  @action\n  postLogin = async () => {\n    await this.updateUserInfo();\n  }\n\n  @action\n  logout = async () => {\n    try {\n      await request({\n        method:'post',\n        url: URIs.post_logout\n      });\n    } catch(e) {\n\n    } finally {\n      this.isLogin = false;\n      this.id = -1;\n      this.username = '';\n      this.name = '';\n    }\n  }\n  \n}","import { observable, action } from \"mobx\";\nimport request from \"utils/request\";\nimport URIs from \"const/URIs\";\nimport IRoom from \"interfaces/IRoom\";\nimport IInsertChatRoomFormValues from \"interfaces/form/IInsertChatRoomFormValues\";\n\nexport default class RoomList {\n  @observable rooms: IRoom[] = [];\n  @observable insertChatRoomVisible:boolean = false;\n\n  @action\n  loadRooms = async () => {\n    try {\n      this.rooms = await request({\n        method: 'get',\n        url: URIs.get_rooms\n      }) as IRoom[];\n    } catch (e) {\n      throw e;\n    }\n  }\n  \n  @action\n  insertRoom = async (values:IInsertChatRoomFormValues) => {\n    const { title } = values;\n    try {\n      const newRoom = await request({\n        method: 'post',\n        url: URIs.post_insert_room,\n        data: { title }\n      });\n      this.rooms.unshift(newRoom);\n    } catch (e) {\n      throw e;\n    }\n  }\n}","import { observable, action, values } from \"mobx\";\nimport IChat from \"interfaces/IChat\";\nimport URIs from \"const/URIs\";\nimport request from \"utils/request\";\nimport ISendChatFormValues from \"interfaces/form/ISendChatFormValues\";\nimport IRoom from \"interfaces/IRoom\";\nimport IUser from \"interfaces/IUser\";\nimport io from 'socket.io-client';\nimport config from \"config\";\n\nexport default class ChatRoom {\n  @observable roomId:number = -1;\n  @observable chats:IChat[] = [];\n  @observable info:IRoom | null = null;\n  @observable invitableUsers:IUser[] = [];\n  @observable inviteDialogVisible:boolean = false;\n  socket:SocketIOClient.Socket|null = null;\n\n  @action\n  load = async ()=>{\n    if(this.roomId < 0)\n      throw Error('방을 선택해주세요.');\n\n      try {\n        \n      if(!!this.socket) {\n        this.socket.disconnect();\n        this.socket.close();\n      }\n      \n      this.socket = io(`${config.host}`, {query: {\n        roomId: this.roomId\n      }});\n      this.socket.on('connect', function(){\n      });\n      this.socket.on('disconnect', function () {\n      });\n      this.socket.on('chat', (data:any) => {\n        this.chats.push(data as IChat);\n      });\n      this.socket.connect();\n      } catch(e) {\n        console.error(e);\n      }\n\n      this.info = await request({\n        method: 'get',\n        url: URIs.get_room_info(this.roomId),\n      }) as IRoom;\n    \n      this.chats = await request({\n        method: 'get',\n        url: URIs.get_chats(this.roomId),\n      }) as IChat[];\n      \n  }\n\n  @action\n  sendMessage = async (values:ISendChatFormValues) => {\n    if(this.roomId < 0)\n      throw Error('방을 선택해주세요.');\n    try {\n      await request({\n        method:'post',\n        url: URIs.post_send_message(this.roomId),\n        data: values\n      });\n    } catch(e) {\n      throw e;\n    }\n  }\n  @action\n  sendImage = async (image:any) => {\n    if(this.roomId < 0)\n      throw Error('방을 선택해주세요.');\n    try {\n      const form = new FormData();\n      form.append('image', image);\n      await request({\n        method:'post',\n        url:URIs.post_send_image(this.roomId),\n        data: form,\n        headers: {\n          'content-type': 'multipart/form-data'\n        }\n      });\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  @action\n  loadInvitableUser = async () => {\n    if(this.roomId < 0)\n      throw Error('방을 선택해주세요.');\n    try {\n      this.invitableUsers = await request({\n        method:'get',\n        url: URIs.get_room_invitable_users(this.roomId),\n        data: values\n      });\n      console.log(this.invitableUsers);\n    } catch(e) {\n      throw e;\n    }\n  }\n  \n  @action\n  inviteUser = async (userId:number) => {\n    if(this.roomId < 0)\n      throw Error('방을 선택해주세요.');\n    try {\n      await request({\n        method:'post',\n        url: URIs.post_invite_user(this.roomId, userId),\n      });\n    } catch(e) {\n      throw e;\n    }\n  }\n}","import { observable, action } from \"mobx\";\nimport IRegisterFormValues from \"interfaces/form/IRegisterFormValues\";\nimport URIs from \"const/URIs\";\nimport request from \"utils/request\";\n\nexport default class Login {\n  @observable registerDialogVisible:boolean = false;\n\n  @action\n  register = async (values:IRegisterFormValues) => {\n    try {\n      await request({\n        method:'post',\n        url: URIs.post_register,\n        data: {\n          ...values,\n          password: '', //TODO: password 지원\n        }\n      });\n    } catch (e) {\n      throw e;\n    }\n  }\n}","import Error from \"./models/Error\";\nimport Loading from \"./models/Loading\";\nimport LoginInfo from \"./models/LoginInfo\";\nimport RoomList from \"./models/screens/RoomList\";\nimport ChatRoom from \"./models/screens/ChatRoom\";\nimport Login from \"./models/screens/Login\";\n\nconst store = {\n  loginInfo: new LoginInfo(),\n  loading: new Loading(),\n  error: new Error({}),\n\n  /** screens */\n  screenLogin: new Login(),\n  screenRoomList: new RoomList(),\n  screenChatRoom: new ChatRoom(),\n};\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from 'store';\nimport {Provider} from 'mobx-react';\n\nReactDOM.render(\n  <Provider {...store}>\n    <App />\n  </Provider>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}